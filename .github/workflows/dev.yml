name: DEV CI/CD Pipeline

on:
  push:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # - name: Run tests
      #   run: pytest  # Assuming you have tests defined

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.NEW_DOCKER_USERNAME }}
          password: ${{ secrets.NEW_DOCKER_PASSWORD }}

      - name: Verify Docker Login
        run: docker info
        
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.NEW_DOCKER_USERNAME }}/mostachari_backend:latest

      

      - name: SSH and Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            set -e  # Ensures the script stops on the first error
            docker pull ${{ secrets.NEW_DOCKER_USERNAME }}/mostachari_backend:latest
            docker stop myapp || true  # Ignore errors if 'myapp' is not running
            docker rm myapp || true  # Ignore errors if 'myapp' does not exist
            docker run -d --restart unless-stopped --name myapp -p 80:80 ${{ secrets.NEW_DOCKER_USERNAME }}/mostachari_backend:latest
